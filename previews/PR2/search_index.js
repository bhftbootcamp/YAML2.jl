var documenterSearchIndex = {"docs":
[{"location":"#LibYAML.jl","page":"Home","title":"LibYAML.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage) (Image: Registry)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia wrapper for libyaml, providing fast and minimal YAML parsing.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install LibYAML, simply use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add LibYAML","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A basic example of parsing structured YAML data in Julia, including anchors and merge keys:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LibYAML\n\nyaml_config = \"\"\"\ndefaults: &defaults\n  port: !!int 443\n  enable_tls: true\n\nserver:\n  <<: *defaults\n  bind_address: \"0.0.0.0\"\n  tls:\n    cert_file: \"/etc/certs/cert_file.pem\"\n    key_file: \"/etc/certs/key_file.pem\"\n\nmetrics:\n  prometheus_enabled: true\n  listen: \"0.0.0.0:9100\"\n  service_labels: {service: \"secure-backend\"}\n\nrole_defaults: &role_defaults\n  permissions:\n    - read\n    - write\n\nusers:\n  - username: \"admin\"\n    <<: *role_defaults\n  - username: \"stanislav\"\n    <<: *role_defaults\n    permissions:\n      - read\n\"\"\"\n\njulia> parse_yaml(yaml_config)\nDict{String, Any} with 5 entries:\n  \"metrics\" => Dict{String,Any}(\"listen\"=>\"0.0.0.0:9100\", …)\n  \"users\"   => Any[...]\n  ...","category":"page"},{"location":"#Useful-Links","page":"Home","title":"Useful Links","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"libyaml – Official library repository.  \nLibYAML_jll.jl – Julia wrapper for libyaml.","category":"page"},{"location":"pages/api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"pages/api_reference/#YAML-parser","page":"API Reference","title":"YAML parser","text":"","category":"section"},{"location":"pages/api_reference/#LibYAML.ParserYAML.parse_yaml","page":"API Reference","title":"LibYAML.ParserYAML.parse_yaml","text":"parse_yaml(yaml_str::String; kw...)\nparse_yaml(yaml_str::Vector{UInt8}; kw...)\n\nParse a YAML string or file (or vector of UInt8) and returns a dictionary, vector or nothing.\n\nIf a given YAML document contains a dictionary, the parser returns a dictionary.\nIf a given YAML document contains just a list of variables, the parser returns a vector.\nIf a given YAML document contains no information (i.e. empty), the parser returns nothing.\n\nIf the input contains multiple documents (multi-document YAML), behavior depends on the keyword argument multi:\n\nIf multi = false (default), only the first document is returned.\nIf multi = true, all documents are parsed and returned as a Vector, preserving their individual types (dictionary, vector, or nothing).\n\nKeyword arguments\n\nmulti::Bool = false: If YAML is multidocumental, allows the reader to choose between obtaining all documents at once or only the first one.\ndict_type = Dict{Any,Any}: The type of the dictionary to return.\n\nExamples\n\njulia> yaml_str = \"\"\"\n        name: Alice\n        array:\n          - 1\n          - 2\n          - a: 3\n            b: null\n        dict:\n          a: 1\n          b:\n            - w\n            - d\n       \"\"\";\n\njulia> parse_yaml(yaml_str)\nDict{Any, Any}(\n    \"dict\" => Dict{Any, Any}(\n        \"b\" => Any[\"w\", \"d\"],\n        \"a\" => \"1\"\n    ),\n    \"name\" => \"Alice\",\n    \"array\" => Any[\"1\", \"2\", Dict{Any, Any}(\"b\" => nothing, \"a\" => \"3\")]\n)\n\njulia> yaml_str = \"\"\"\n        ---\n        name: Alice\n        array:\n          - 1\n          - 2\n          - a: 3\n            b: null\n        dict:\n          a: 1\n          b:\n            - w\n            - d\n        ---\n        name: John\n        array:\n          - 1\n          - 2\n          - a: 3\n            b: null\n        dict:\n          a: 1\n          b:\n            - w\n            - d\n       \"\"\";\n\njulia> parse_yaml(yaml_str)\nDict{Any, Any} with 3 entries:\n  \"dict\"  => Dict{Any, Any}(\"b\"=>Any[\"w\", \"d\"], \"a\"=>\"1\")\n  \"name\"  => \"Alice\"\n  \"array\" => Any[\"1\", \"2\", Dict{Any, Any}(\"b\"=>nothing, \"a\"=>\"3\")]\n\njulia> parse_yaml(yaml_str, multi=true)\n2-element Vector{Any}:\n Dict{Any, Any}(\"dict\" => Dict{Any, Any}(\"b\" => Any[\"w\", \"d\"], \"a\" => \"1\"), \"name\" => \"Alice\", \"array\" => Any[\"1\", \"2\", Dict{Any, Any}(\"b\" => nothing, \"a\" => \"3\")])\n Dict{Any, Any}(\"dict\" => Dict{Any, Any}(\"b\" => Any[\"w\", \"d\"], \"a\" => \"1\"), \"name\" => \"John\", \"array\" => Any[\"1\", \"2\", Dict{Any, Any}(\"b\" => nothing, \"a\" => \"3\")])\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#LibYAML.ParserYAML.open_yaml","page":"API Reference","title":"LibYAML.ParserYAML.open_yaml","text":"open_yaml(path::AbstractString; kw...)\n\nRead a YAML file from a given path and parse it.\n\nKeyword arguments kw is the same as in parse_yaml.\n\n\n\n\n\nopen_yaml(io::IO; kw...)\n\nReads a YAML file from a given io and parse it.\n\nKeyword arguments kw is the same as in parse_yaml.\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#YAML-errors","page":"API Reference","title":"YAML errors","text":"","category":"section"},{"location":"pages/api_reference/#LibYAML.ParserYAML.AbstractYAMLError","page":"API Reference","title":"LibYAML.ParserYAML.AbstractYAMLError","text":"AbstractYAMLError <: Exception\n\nAbstract error type for its subtypes.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#LibYAML.ParserYAML.YAMLError","page":"API Reference","title":"LibYAML.ParserYAML.YAMLError","text":"YAMLError <: AbstractYAMLError\n\nGeneral YAML error.\n\nFields\n\nmsg::String: The message of the error.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#LibYAML.ParserYAML.YAMLMemoryError","page":"API Reference","title":"LibYAML.ParserYAML.YAMLMemoryError","text":"YAMLMemoryError <: AbstractYAMLError\n\nMemory allocation error returned when resources cannot be allocated.\n\nFields\n\ncontext::String: The context of the error.\ncontext_mark::YAMLMark: The position (line and column) of the context, where the error occured.\nproblem::String: The message of the error.\nproblem_mark::YAMLMark: The position (line and column) of the place, where the error occured.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#LibYAML.ParserYAML.YAMLReaderError","page":"API Reference","title":"LibYAML.ParserYAML.YAMLReaderError","text":"YAMLReaderError <: AbstractYAMLError\n\nError reading of a YAML document.\n\nFields\n\ncontext::String: The context of the error.\ncontext_mark::YAMLMark: The position (line and column) of the context, where the error occured.\nproblem::String: The message of the error.\nproblem_mark::YAMLMark: The position (line and column) of the place, where th error occured.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#LibYAML.ParserYAML.YAMLScannerError","page":"API Reference","title":"LibYAML.ParserYAML.YAMLScannerError","text":"YAMLScannerError <: AbstractYAMLError\n\nError tokenizing YAML stream.\n\nFields\n\ncontext::String: The context of the error.\ncontext_mark::YAMLMark: The position (line and column) of the context, where the error occured.\nproblem::String: The message of the error.\nproblem_mark::YAMLMark: The position (line and column) of the place, where th error occured.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#LibYAML.ParserYAML.YAMLParserError","page":"API Reference","title":"LibYAML.ParserYAML.YAMLParserError","text":"YAMLParserError <: AbstractYAMLError\n\nError parsing YAML document structure.\n\nFields\n\ncontext::String: The context of the error.\ncontext_mark::YAMLMark: The position (line and column) of the context, where the error occured.\nproblem::String: The message of the error.\nproblem_mark::YAMLMark: The position (line and column) of the place, where th error occured.\n\n\n\n\n\n","category":"type"}]
}
